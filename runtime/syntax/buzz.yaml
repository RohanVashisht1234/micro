filetype: python

detect:
    filename: "\\.buzz$"
    header: "^#!.*/(env +)?python(3)?$"

rules:
    # built-in objects
    - constant: "\\b(range|namespace|typeof|type|zdef|void|static|var|const|extern|import|export|from|test|as|in|while|if|else|fun|try|catch|throw|constructor|return|switch|default|break|for|foreach|do|until|continue|resolve|resume|yield|any|out)\\b"
      # built-in functions
    - identifier: "\\b(void|static|var|const|extern|import|export|from|test|as|in|while|if|else|fun|try|catch|throw|constructor|return|switch|default|break|for|foreach|do|until|continue|resolve|resume|yield)\\b"
      # special method names
    - identifier: "\\b(!|and|or|band|bor|xor|\\?\\?)\\b"
      # definitions
    - identifier: "def [a-zA-Z_0-9]+"
      # keywords
    - statement: "\\b(and|as|assert|async|await|break|case|class|continue|def|del|elif|else|except|finally|for|from|global|if|import|in|is|lambda|match|nonlocal|not|or|pass|raise|return|try|while|with|yield)\\b"
      # keywords (declaration)
    - statements: "\\b(enum|object|protocol)\\b"
      # constants (true, false, null, this)
    - constants: "\\b(true|false|null|this)\\b"
      # constants (types)
    - type: "\\b(ud|str|int|float|obj|fib|bool|pat|type|any)\\b\\??"
      # decorators
    - preproc: "^\\s*@[^(]*"
      # operators
    - symbol.operator: "(=|\\+=|\\-=|\\/=|\\*=)"
      # parentheses
    - symbol.brackets: "([(){}]|\\[|\\])"
      # extra operators
    - symbol.operator: "(\\+|\\-|\\/|%|\\*|>>|<<|\\\\|\\^|&|~|!>)"
      # Comparision operators
    - symbol.operator: "(==|!=|<=?|>=?|\\bis\\b|\\?\\?)"
      # numbers
    - constant.number: "\\b[0-9](_?[0-9])*(\\.([0-9](_?[0-9])*)?)?(e[0-9](_?[0-9])*)?\\b" # decimal
    - constant.number: "\\b0b(_?[01])+\\b"     # bin
    - constant.number: "\\b0o(_?[0-7])+\\b"    # oct
    - constant.number: "\\b0x(_?[0-9a-fA-F])+\\b" # hex

    - constant.string:
        start: "\""
        end: "(\"|$)"
        skip: "\\\\."
        rules:
            - constant.specialChar: "\\\\."

    - constant.string:
        start: "'"
        end: "('|$)"
        skip: "\\\\."
        rules:
            - constant.specialChar: "\\\\."

    - comment:
        start: "|"
        end: "$"
        rules:  # AKA Code tags (PEP 350)
            - todo: "(TODO|FIXME|HACK|BUG|NOTE|FAQ|MNEMONIC|REQ|RFE|IDEA|PORT|\\?\\?\\?|!!!|GLOSS|SEE|TODOC|STAT|RVD|CRED):?"
